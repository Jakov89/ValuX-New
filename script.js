const FMP_API_KEY = 'M3WCOsdd5MojVXueguoarO7fGe9Nkuba';
const MAX_COMPARE_STOCKS = 6; // Max stocks for comparison

const metricExplanations = {
    // Profile
    'price': "The current trading price of one share of the company\\'s stock.",
    'changes': "The change in stock price since the previous trading day\\'s close.",
    'changesPercentage': "The percentage change in stock price since the previous trading day\\'s close.",
    'industry': "The specific industry group within the sector the company operates in.",
    'sector': "The broad sector of the economy to which the company belongs.",
    'ceo': "Chief Executive Officer of the company.",
    'website': "Official website of the company.",
    'description': "A summary of the company\\'s business, operations, and activities.",
    'companyName': "Full legal name of the company.",
    'exchangeShortName': "The stock exchange where the company\\'s shares are listed.",
    'mktCap': "Total market value of a company\\'s outstanding shares (Current Share Price x Total Outstanding Shares).",

    // Income Statement
    'date': "The end date of the reporting period for this financial statement.",
    'revenue': "Total income generated by a company from its normal business operations.",
    'costOfRevenue': "The direct costs attributable to the production of the goods or supply of services by a company.",
    'grossProfit': "Profit a company makes after deducting the costs associated with making and selling its products, or the costs associated with providing its services (Revenue - Cost of Revenue).",
    'grossProfitRatio': "Measures gross profit as a percentage of revenue.",
    'researchAndDevelopmentExpenses': "Costs incurred for research and development activities.",
    'generalAndAdministrativeExpenses': "Operating expenses not directly related to production or sales, like salaries, rent, utilities.",
    'sellingAndMarketingExpenses': "Expenses related to marketing, advertising, and selling products/services.",
    'sellingGeneralAndAdministrativeExpenses': "Combined costs of selling products and administrative functions.",
    'otherExpenses': "Various expenses not classified elsewhere.",
    'operatingExpenses': "Total expenses incurred from normal ongoing operations (e.g., R&D, SG&A).",
    'operatingIncome': "Profit from business operations before interest and taxes (Gross Profit - Operating Expenses).",
    'operatingIncomeRatio': "Measures operating income as a percentage of revenue.",
    'interestIncome': "Income earned from investments, loans, etc.",
    'interestExpense': "Cost of borrowed funds.",
    'depreciationAndAmortization': "The expense related to the allocation of the cost of tangible (depreciation) and intangible (amortization) assets over their useful lives.",
    'ebitda': "Earnings Before Interest, Taxes, Depreciation, and Amortization. An indicator of a company\\'s financial performance.",
    'ebitdaratio': "EBITDA as a percentage of revenue.",
    'incomeBeforeTax': "A company\\'s profit before deducting income tax expenses.",
    'incomeBeforeTaxRatio': "Income before tax as a percentage of revenue.",
    'incomeTaxExpense': "The amount of tax a company pays on its income.",
    'netIncome': "A company\\'s total earnings (or profit) after all expenses, including taxes and interest, have been deducted (Income Before Tax - Income Tax Expense).",
    'netIncomeRatio': "Measures net income as a percentage of revenue (Profit Margin).",
    'eps': "Earnings Per Share, the portion of a company\\'s profit allocated to each outstanding share of common stock.",
    'epsdiluted': "Earnings Per Share calculated using diluted shares (includes all potential shares like options and convertible securities).",
    'weightedAverageShsOut': "Weighted average number of common shares outstanding during the period.",
    'weightedAverageShsOutDil': "Weighted average number of diluted common shares outstanding during the period.",

    // Balance Sheet
    'cashAndCashEquivalents': "The most liquid assets of a company, including currency, checks, and money market accounts.",
    'shortTermInvestments': "Investments that are expected to be converted to cash within one year.",
    'cashAndShortTermInvestments': "Sum of cash, cash equivalents, and short-term investments.",
    'netReceivables': "Money owed to a company by its customers for goods or services delivered.",
    'inventory': "Raw materials, work-in-progress goods, and finished goods that a company has on hand.",
    'otherCurrentAssets': "Other assets expected to be converted to cash within one year.",
    'totalCurrentAssets': "Sum of all assets a company expects to convert to cash within one year.",
    'propertyPlantEquipmentNet': "Value of a company\\'s property, plant, and equipment, net of accumulated depreciation.",
    'goodwill': "An intangible asset representing the excess of the purchase price of a company over the fair market value of its identifiable net assets.",
    'intangibleAssets': "Non-physical assets such as patents, trademarks, copyrights, and goodwill.",
    'goodwillAndIntangibleAssets': "Sum of goodwill and other intangible assets.",
    'longTermInvestments': "Investments that a company intends to hold for more than one year.",
    'taxAssets': "Assets on a company\\'s balance sheet that may be used to reduce taxable income in the future.",
    'otherNonCurrentAssets': "Other assets not expected to be converted to cash within one year.",
    'totalNonCurrentAssets': "Sum of all long-term assets.",
    'totalAssets': "The sum of all current and non-current assets owned by a company.",
    'accountPayables': "Money owed by a company to its suppliers for goods or services received.",
    'shortTermDebt': "Financial obligations due within one year.",
    'taxPayables': "Taxes owed by a company that have not yet been paid.",
    'deferredRevenue': "Advance payments a company receives for products or services that are to be delivered or performed in the future.",
    'otherCurrentLiabilities': "Other financial obligations due within one year.",
    'totalCurrentLiabilities': "Sum of all financial obligations due within one year.",
    'longTermDebt': "Financial obligations due after one year.",
    'deferredRevenueNonCurrent': "Portion of deferred revenue that will be recognized as revenue after one year.",
    'deferredTaxLiabilitiesNonCurrent': "Tax liabilities that will be paid in a future period (more than one year).",
    'otherNonCurrentLiabilities': "Other financial obligations due after one year.",
    'totalNonCurrentLiabilities': "Sum of all long-term financial obligations.",
    'totalLiabilities': "The sum of a company\\'s short-term and long-term financial obligations.",
    'commonStock': "Represents ownership in a company, carrying voting rights.",
    'retainedEarnings': "Cumulative net earnings or profits of a company after accounting for dividend payments.",
    'accumulatedOtherComprehensiveIncomeLoss': "Cumulative gains and losses not reported on the income statement, such as unrealized gains/losses on certain investments.",
    'othertotalStockholdersEquity': "Other components of stockholders\\' equity not classified elsewhere.",
    'totalStockholdersEquity': "Represents the shareholders\\' stake in the company (Total Assets - Total Liabilities).",
    'totalEquity': "Same as Total Stockholders\\' Equity.",
    'totalLiabilitiesAndStockholdersEquity': "Must equal Total Assets, representing the balance sheet equation.",
    'minorityInterest': "Equity in a subsidiary held by investors other than the parent company.",
    'totalLiabilitiesAndTotalEquity': "Sum of total liabilities and total equity, must equal total assets.",
    'totalInvestments': "Sum of short-term and long-term investments.",
    'totalDebt': "The sum of all of a company\\'s short-term and long-term interest-bearing financial obligations.",
    'netDebt': "Total debt minus cash and cash equivalents.",

    // Cash Flow Statement
    // 'netIncome': "Starting point for the indirect method of calculating operating cash flow.", // Already defined
    // 'depreciationAndAmortization': "Non-cash expense added back to net income.", // Already defined
    'deferredIncomeTax': "Changes in deferred tax assets and liabilities.",
    'stockBasedCompensation': "Non-cash expense related to employee stock options or awards.",
    'changeInWorkingCapital': "Net change in current assets and current liabilities (e.g., receivables, inventory, payables).",
    'accountsReceivables': "Changes in accounts receivable.",
    // 'inventory': "Changes in inventory.", // Already defined
    // 'accountsPayables': "Changes in accounts payable.", // Already defined
    'otherWorkingCapital': "Changes in other working capital items.",
    'otherNonCashItems': "Other non-cash income or expenses.",
    'netCashProvidedByOperatingActivities': "Cash generated from a company\\'s normal business operations.",
    'investmentsInPropertyPlantAndEquipment': "Cash used to purchase property, plant, and equipment (Capital Expenditure).",
    'acquisitionsNet': "Cash used for acquiring other businesses, net of cash acquired.",
    'purchasesOfInvestments': "Cash used to purchase investments.",
    'salesMaturitiesOfInvestments': "Cash received from selling or maturing investments.",
    'otherInvestingActivities': "Cash flows from other investing activities.",
    'netCashUsedForInvestingActivities': "Total cash flow from investing activities.",
    'debtRepayment': "Cash used to repay debt.",
    'commonStockIssued': "Cash received from issuing new common stock.",
    'commonStockRepurchased': "Cash used to buy back company\\'s own common stock.",
    'dividendsPaid': "Cash paid out to shareholders as dividends.",
    'otherFinancingActivities': "Cash flows from other financing activities (e.g., issuing preferred stock, short-term borrowing changes).",
    'netCashUsedProvidedByFinancingActivities': "Total cash flow from financing activities.",
    'effectOfForexChangesOnCash': "Impact of foreign exchange rate changes on cash balances.",
    'netChangeInCash': "Overall increase or decrease in cash during the period.",
    'cashAtEndOfPeriod': "Cash balance at the end of the reporting period.",
    'cashAtBeginningOfPeriod': "Cash balance at the start of the reporting period.",
    'operatingCashFlow': "Cash generated from normal business operations (often used interchangeably with Net Cash Provided by Operating Activities).",
    'capitalExpenditure': "Funds used by a company to acquire, upgrade, and maintain physical assets like property, buildings, or equipment (often a negative value representing outflow).",
    'freeCashFlow': "Cash flow available to all investors (debt and equity holders) after the company has paid all operating expenses and capital expenditures (Operating Cash Flow - Capital Expenditure).",

    // Key Metrics
    'revenuePerShareTTM': "Total revenue divided by the weighted average shares outstanding (Trailing Twelve Months).",
    'netIncomePerShareTTM': "Net income divided by the weighted average shares outstanding (TTM).",
    'operatingCashFlowPerShareTTM': "Operating cash flow divided by the weighted average shares outstanding (TTM).",
    'freeCashFlowPerShareTTM': "Free cash flow divided by the weighted average shares outstanding (TTM).",
    'cashPerShareTTM': "Total cash and cash equivalents divided by weighted average shares outstanding (TTM).",
    'bookValuePerShareTTM': "Book value of equity divided by weighted average shares outstanding (TTM).",
    'tangibleBookValuePerShareTTM': "Tangible book value (book value minus intangible assets) divided by weighted average shares outstanding (TTM).",
    'shareholdersEquityPerShareTTM': "Total shareholders\\' equity divided by weighted average shares outstanding (TTM).",
    'interestDebtPerShareTTM': "Total interest-bearing debt divided by weighted average shares outstanding (TTM).",
    'marketCapTTM': "Total market value of a company\\'s outstanding shares (TTM). Also known as Market Capitalization.",
    'enterpriseValueTTM': "A measure of a company\\'s total value, often used as a more comprehensive alternative to market capitalization (Market Cap + Total Debt - Cash & Cash Equivalents) (TTM).",
    'peRatioTTM': "Price-to-Earnings ratio, measures the company\\'s current share price relative to its per-share earnings (TTM).",
    'priceToSalesRatioTTM': "Compares a company\\'s stock price to its revenues (TTM).",
    'pocfRatioTTM': "Price-to-Operating Cash Flow ratio, compares market price to operating cash flow per share (TTM).",
    'pfcfRatioTTM': "Price-to-Free Cash Flow ratio, compares market price to free cash flow per share (TTM).",
    'pbRatioTTM': "Price-to-Book ratio, compares a company\\'s market capitalization to its book value (TTM).",
    'ptbRatioTTM': "Price-to-Tangible Book ratio, compares a company\\'s market capitalization to its tangible book value (TTM).",
    'evToSalesTTM': "Enterprise Value to Sales ratio (TTM).",
    'enterpriseValueOverEBITDATTM': "Enterprise Value to EBITDA ratio. A valuation metric to compare businesses (TTM).",
    'evToOperatingCashFlowTTM': "Enterprise Value to Operating Cash Flow ratio (TTM).",
    'evToFreeCashFlowTTM': "Enterprise Value to Free Cash Flow ratio (TTM).",
    'earningsYieldTTM': "Inverse of P/E ratio (Earnings per Share / Price per Share) (TTM).",
    'freeCashFlowYieldTTM': "Free Cash Flow per Share divided by Market Price per Share (TTM).",
    'debtToEquityTTM': "Measures a company\\'s financial leverage (Total Debt / Total Equity) (TTM).",
    'debtToAssetsTTM': "Measures the proportion of a company\\'s assets financed through debt (Total Debt / Total Assets) (TTM).",
    'netDebtToEBITDATTM': "Net Debt (Total Debt - Cash) divided by EBITDA. Measures leverage and ability to pay off debt (TTM).",
    'currentRatioTTM': "Liquidity ratio that measures ability to pay short-term obligations (Current Assets / Current Liabilities) (TTM).",
    'interestCoverageTTM': "Measures a company\\'s ability to meet its interest payments (EBIT / Interest Expense) (TTM).",
    'incomeQualityTTM': "Operating Cash Flow divided by Net Income. Indicates earnings quality (TTM).",
    'dividendYieldTTM': "Annual dividend per share divided by price per share, as a percentage (TTM).",
    'dividendYieldPercentageTTM': "Annual dividend per share divided by price per share, as a percentage (TTM).", 
    'payoutRatioTTM': "Proportion of earnings paid out as dividends (Dividends per Share / Earnings per Share) (TTM).",
    'salesGeneralAndAdministrativeToRevenueTTM': "SG&A expenses as a percentage of total revenue (TTM).",
    'researchAndDdevelopementToRevenueTTM': "R&D expenses as a percentage of total revenue (TTM).",
    'intangiblesToTotalAssetsTTM': "Intangible assets as a percentage of total assets (TTM).",
    'capexToOperatingCashFlowTTM': "Capital Expenditures as a percentage of Operating Cash Flow (TTM).",
    'capexToRevenueTTM': "Capital Expenditures as a percentage of total revenue (TTM).",
    'capexToDepreciationTTM': "Capital Expenditures relative to Depreciation expense (TTM).",
    'stockBasedCompensationToRevenueTTM': "Stock-based compensation expense as a percentage of total revenue (TTM).",
    'grahamNumberTTM': "A value investing metric to estimate the fair value of a stock (Square root of (22.5 x EPS x Book Value per Share)) (TTM).",
    'roicTTM': "Return on Invested Capital. Measures how well a company is using its money to generate returns (Net Operating Profit After Tax / Invested Capital) (TTM).",
    'returnOnTangibleAssetsTTM': "Measures return generated from a company\\'s tangible assets (Net Income / Average Tangible Assets) (TTM).",
    'grahamNetNetTTM': "A value investing metric: (Cash and Short-Term Investments + 0.75 * Accounts Receivable + 0.5 * Inventory - Total Liabilities) / Shares Outstanding (TTM).",
    'workingCapitalTTM': "Current Assets - Current Liabilities (TTM).",
    'tangibleAssetValueTTM': "Total Assets - Intangible Assets - Goodwill (TTM).",
    'netCurrentAssetValueTTM': "Current Assets - Total Liabilities (TTM).",
    'investedCapitalTTM': "The total amount of money raised by a company by issuing securities to shareholders and debt to bondholders (Total Debt + Total Equity) (TTM).",
    'averageReceivablesTTM': "Average amount of money owed by customers over a period (TTM).",
    'averagePayablesTTM': "Average amount of money a company owes to its suppliers over a period (TTM).",
    'averageInventoryTTM': "Average value of inventory held over a period (TTM).",
    'daysSalesOutstandingTTM': "Average number of days it takes a company to collect payment after a sale (365 / Receivables Turnover) (TTM).",
    'daysPayablesOutstandingTTM': "Average number of days it takes a company to pay its suppliers (365 / Payables Turnover) (TTM).",
    'daysOfInventoryOnHandTTM': "Average number of days a company holds inventory before selling it (365 / Inventory Turnover) (TTM).",
    'receivablesTurnoverTTM': "How efficiently a company collects its receivables (Net Credit Sales / Average Accounts Receivable) (TTM).",
    'payablesTurnoverTTM': "How quickly a company pays its suppliers (Cost of Goods Sold / Average Accounts Payable) (TTM).",
    'inventoryTurnoverTTM': "How quickly a company sells its inventory (Cost of Goods Sold / Average Inventory) (TTM).",
    'roeTTM': "Return on Equity. Measures profitability relative to shareholders\\' equity (Net Income / Average Shareholder Equity) (TTM).",
    'capexPerShareTTM': "Capital Expenditures divided by weighted average shares outstanding (TTM).",

    // Financial Growth
    'revenueGrowth': "The year-over-year percentage increase in a company\\'s total revenue.",
    'grossProfitGrowth': "The year-over-year percentage increase in a company\\'s gross profit.",
    'ebitgrowth': "The year-over-year percentage increase in Earnings Before Interest and Taxes (EBIT).",
    'operatingIncomeGrowth': "The year-over-year percentage increase in operating income.",
    'netIncomeGrowth': "The year-over-year percentage increase in net income.",
    'epsgrowth': "The year-over-year percentage increase in Earnings Per Share.",
    'epsdilutedGrowth': "The year-over-year percentage increase in diluted Earnings Per Share.",
    'weightedAverageSharesGrowth': "The year-over-year percentage change in weighted average shares outstanding.",
    'weightedAverageSharesDilutedGrowth': "The year-over-year percentage change in diluted weighted average shares outstanding.",
    'dividendsperShareGrowth': "The year-over-year percentage increase in dividends paid per share.",
    'operatingCashFlowGrowth': "The year-over-year percentage increase in operating cash flow.",
    'freeCashFlowGrowth': "The year-over-year percentage increase in free cash flow.",
    'tenYearRevenueGrowthPerShare': "Annualized revenue per share growth over the last 10 years.",
    'fiveYearRevenueGrowthPerShare': "Annualized revenue per share growth over the last 5 years.",
    'threeYearRevenueGrowthPerShare': "Annualized revenue per share growth over the last 3 years.",
    'tenYearOperatingCFGrowthPerShare': "Annualized operating cash flow per share growth over the last 10 years.",
    'fiveYearOperatingCFGrowthPerShare': "Annualized operating cash flow per share growth over the last 5 years.",
    'threeYearOperatingCFGrowthPerShare': "Annualized operating cash flow per share growth over the last 3 years.",
    'tenYearNetIncomeGrowthPerShare': "Annualized net income per share growth over the last 10 years.",
    'fiveYearNetIncomeGrowthPerShare': "Annualized net income per share growth over the last 5 years.",
    'threeYearNetIncomeGrowthPerShare': "Annualized net income per share growth over the last 3 years.",
    'tenYearShareholdersEquityGrowthPerShare': "Annualized shareholders\\' equity per share growth over the last 10 years.",
    'fiveYearShareholdersEquityGrowthPerShare': "Annualized shareholders\\' equity per share growth over the last 5 years.",
    'threeYearShareholdersEquityGrowthPerShare': "Annualized shareholders\\' equity per share growth over the last 3 years.",
    'tenYearDividendperShareGrowthPerShare': "Annualized dividend per share growth over the last 10 years.",
    'fiveYearDividendperShareGrowthPerShare': "Annualized dividend per share growth over the last 5 years.",
    'threeYearDividendperShareGrowthPerShare': "Annualized dividend per share growth over the last 3 years.",
    'receivablesGrowth': "The year-over-year percentage increase in accounts receivable.",
    'inventoryGrowth': "The year-over-year percentage increase in inventory.",
    'assetGrowth': "The year-over-year percentage increase in total assets.",
    'bookValueperShareGrowth': "The year-over-year percentage increase in book value per share.",
    'debtGrowth': "The year-over-year percentage increase in total debt.",
    'rdexpenseGrowth': "The year-over-year percentage increase in R&D expenses.",
    'sgaexpensesGrowth': "The year-over-year percentage increase in SG&A expenses."
};

document.addEventListener('DOMContentLoaded', () => {
    const heroSearchInput = document.querySelector('.hero-search-bar input[type="text"]');
    const heroSearchButton = document.querySelector('.hero-search-bar button');
    const tickerSearchResultsContainer = document.getElementById('ticker-search-results');
    const modal = document.getElementById('financial-details-section');
    const modalCloseButton = document.querySelector('.modal-close-btn');
    const modalFinancialContent = document.getElementById('modal-financial-content');
    let customTooltip = document.getElementById('custom-tooltip'); 

    if (heroSearchInput && heroSearchButton) {
        heroSearchButton.addEventListener('click', () => {
            handleStockSearch(heroSearchInput.value);
        });

        heroSearchInput.addEventListener('keypress', (event) => {
            if (event.key === 'Enter') {
                handleStockSearch(heroSearchInput.value);
            }
        });
    } else {
        console.error('Hero search input or button not found.');
    }

    if (modalCloseButton) {
        modalCloseButton.addEventListener('click', closeModal);
    }

    // Close modal if backdrop is clicked
    if (modal) {
        modal.addEventListener('click', (event) => {
            if (event.target === modal) { // Check if the click is on the backdrop itself
                closeModal();
            }
        });
    }

    // Close modal with Escape key
    document.addEventListener('keydown', (event) => {
        if (event.key === 'Escape' && modal.style.display !== 'none') {
            closeModal();
        }
    });

    // Tooltip event delegation
    if (modalFinancialContent) {
        modalFinancialContent.addEventListener('mouseover', handleTooltipMouseOver);
        modalFinancialContent.addEventListener('mouseout', handleTooltipMouseOut);
        modalFinancialContent.addEventListener('mousemove', handleTooltipMouseMove);
    }
});

function openModal() {
    const modal = document.getElementById('financial-details-section');
    if (modal) {
        modal.style.display = 'block'; // Or 'flex' if you use flexbox for centering backdrop content
        document.body.style.overflow = 'hidden'; // Prevent background scrolling
    }
}

function closeModal() {
    const modal = document.getElementById('financial-details-section');
    const modalContent = document.getElementById('modal-financial-content');
    if (modal) {
        modal.style.display = 'none';
        document.body.style.overflow = 'auto'; // Restore background scrolling
        if (modalContent) {
            modalContent.innerHTML = ''; // Clear content when closing
        }
        destroyActiveCharts(); // Ensure charts are destroyed when modal closes
    }
}

async function handleStockSearch(searchTerm) {
    console.log(`Fetching ticker suggestions for: ${searchTerm}`);
    const tickerSearchResultsContainer = document.getElementById('ticker-search-results');
    tickerSearchResultsContainer.innerHTML = '<p style="padding: 1rem; text-align: center;">Loading...</p>'; // Show loading indicator

    const url = `https://financialmodelingprep.com/api/v3/search-ticker?query=${encodeURIComponent(searchTerm)}&limit=10&exchange=NASDAQ,NYSE,AMEX,EURONEXT,TSX&apikey=${FMP_API_KEY}`;

    try {
        const response = await fetch(url);
        if (!response.ok) {
            const errorData = await response.json();
            console.error('FMP API Error:', errorData);
            tickerSearchResultsContainer.innerHTML = `<p style="padding: 1rem; text-align: center; color: red;">Error fetching data: ${errorData.message || response.statusText}</p>`;
            return;
        }
        const data = await response.json();
        displayTickerSearchResults(data);
    } catch (error) {
        console.error('Network or other error:', error);
        tickerSearchResultsContainer.innerHTML = `<p style="padding: 1rem; text-align: center; color: red;">Error: Could not connect to API. ${error.message}</p>`;
    }
}

function displayTickerSearchResults(results) {
    const container = document.getElementById('ticker-search-results');
    container.innerHTML = ''; // Clear previous results or loading message

    if (!results || results.length === 0) {
        container.innerHTML = '<p style="padding: 1rem; text-align: center;">No tickers found matching your search.</p>';
        return;
    }

    results.forEach(stock => {
        const item = document.createElement('div');
        item.classList.add('ticker-result-item');

        // Create "Add to Compare" button
        const addToCompareBtn = document.createElement('button');
        addToCompareBtn.innerHTML = 'Add to Compare <i class="fas fa-plus-circle"></i>';
        addToCompareBtn.classList.add('add-to-compare-btn'); // For styling
        addToCompareBtn.addEventListener('click', (e) => {
            e.stopPropagation(); // Prevent triggering detail view
            addStockToComparisonSession(stock);
        });

        // Structure the item with details and button
        const contentDiv = document.createElement('div');
        contentDiv.classList.add('ticker-result-item-content');
        contentDiv.innerHTML = `
            <span class="symbol">${stock.symbol}</span>
            <span class="name">${stock.name} (${stock.currency || ''} - ${stock.stockExchange || 'N/A'})</span>
        `;
        contentDiv.addEventListener('click', () => { // Keep this part clickable for details
            console.log(`Selected ticker for details: ${stock.symbol}`);
            container.innerHTML = ''; // Clear results after selection
            document.querySelector('.hero-search-bar input[type="text"]').value = `${stock.name} (${stock.symbol})`; 
            fetchAndDisplayStockDetails(stock.symbol);
        });

        item.appendChild(contentDiv);
        item.appendChild(addToCompareBtn);
        container.appendChild(item);
    });
}

function addStockToComparisonSession(stock) {
    if (!stock || !stock.symbol || !stock.name) {
        console.error('Invalid stock data for comparison:', stock);
        alert('Could not add stock to comparison due to invalid data.');
        return;
    }

    let comparisonStocks = [];
    const storedStocks = sessionStorage.getItem('comparisonStocks');
    if (storedStocks) {
        try {
            comparisonStocks = JSON.parse(storedStocks);
            if (!Array.isArray(comparisonStocks)) comparisonStocks = []; // Ensure it is an array
        } catch (e) {
            console.error("Error parsing comparisonStocks from sessionStorage:", e);
            comparisonStocks = []; // Reset if parsing fails
        }
    }

    if (comparisonStocks.length >= MAX_COMPARE_STOCKS) {
        alert(`You can compare a maximum of ${MAX_COMPARE_STOCKS} stocks. Please go to the Compare page to manage your list.`);
        return;
    }

    if (comparisonStocks.find(s => s.symbol === stock.symbol)) {
        alert(`${stock.symbol} is already in your comparison list.`);
        return;
    }

    comparisonStocks.push({ symbol: stock.symbol, name: stock.name });
    sessionStorage.setItem('comparisonStocks', JSON.stringify(comparisonStocks));
    alert(`${stock.symbol} (${stock.name}) added to comparison list. You now have ${comparisonStocks.length} stock(s) to compare.`);
    // Optionally, could update a counter in the UI here if one exists on index.html
}

async function fetchAndDisplayStockDetails(ticker) {
    console.log(`Fetching detailed financial data for ${ticker}...`);
    const modalFinancialContent = document.getElementById('modal-financial-content');
    
    if (!modalFinancialContent) {
        console.error('Modal content area not found!');
        return;
    }

    modalFinancialContent.innerHTML = `<h2 style="text-align:center;">Loading financial data for ${ticker}...</h2>`;
    openModal(); // Show the modal

    try {
        const [profile, balanceSheet, incomeStatement, cashFlow, keyMetrics, financialGrowth] = await Promise.all([
            fetchFinancialData(ticker, 'profile'),
            fetchFinancialData(ticker, 'balance-sheet-statement', { period: 'annual', limit: 5 }),
            fetchFinancialData(ticker, 'income-statement', { period: 'annual', limit: 5 }),
            fetchFinancialData(ticker, 'cash-flow-statement', { period: 'annual', limit: 5 }),
            fetchFinancialData(ticker, 'key-metrics', { period: 'annual', limit: 5 }),
            fetchFinancialData(ticker, 'financial-growth', { period: 'annual', limit: 5 })
        ]);

        displayFinancialData(ticker, { profile, balanceSheet, incomeStatement, cashFlow, keyMetrics, financialGrowth });

    } catch (error) {
        console.error(`Error fetching details for ${ticker}:`, error);
        modalFinancialContent.innerHTML = `<h2 style="text-align:center; color:red;">Could not load financial data for ${ticker}.<br>${error.message}</h2>`;
    }
}

async function fetchFinancialData(ticker, endpoint, params = {}) {
    let url = `https://financialmodelingprep.com/api/v3/${endpoint}/${ticker}?apikey=${FMP_API_KEY}`;
    if (params.period) url += `&period=${params.period}`;
    if (params.limit) url += `&limit=${params.limit}`;

    console.log(`Fetching from: ${url}`);
    const response = await fetch(url);
    if (!response.ok) {
        let errorMessage = response.statusText;
        try {
            const errorData = await response.json();
            errorMessage = errorData.message || (errorData["Error Message"]) || errorMessage;
        } catch (e) {
            // Ignore if response is not JSON
        }
        console.error(`FMP API Error for ${endpoint} ${ticker}:`, errorMessage);
        throw new Error(`Failed to fetch ${endpoint}: ${errorMessage}`);
    }
    return response.json();
}

let activeCharts = []; // To keep track of active Chart.js instances

function destroyActiveCharts() {
    activeCharts.forEach(chart => chart.destroy());
    activeCharts = [];
}

function displayFinancialData(ticker, data) {
    destroyActiveCharts(); 
    const modalFinancialContent = document.getElementById('modal-financial-content');
    if (!modalFinancialContent) return;

    const companyName = data.profile && data.profile[0] ? data.profile[0].companyName : ticker;
    let htmlContent = `<h2>Financial Details for ${companyName} (${ticker})</h2>`;

    // Company Profile
    if (data.profile && data.profile[0]) {
        const profile = data.profile[0];
        htmlContent += '<h3>Company Profile</h3>';
        htmlContent += '<div class="profile-info-container" style="display:flex; justify-content:space-between; align-items:flex-start; margin-bottom:1rem;">'; // Flex container
        htmlContent += '<div class="profile-info" style="padding:1rem; background:rgba(0,0,0,0.1); border-radius:0.5rem; flex-grow:1;">';
        htmlContent += `<p><strong data-tooltip-key="price">Price:</strong> ${profile.price ? profile.price.toFixed(2) : 'N/A'} ${profile.currency || ''}</p>`;
        htmlContent += `<p><strong data-tooltip-key="changes">Changes:</strong> <span style="color:${profile.changes >= 0 ? '#4ade80' : '#f87171'};">${profile.changes ? profile.changes.toFixed(2) : 'N/A'} (<span data-tooltip-key="changesPercentage">${profile.changesPercentage ? profile.changesPercentage.toFixed(2) : '0.00'}%</span>)</span></p>`;
        htmlContent += `<p><strong data-tooltip-key="industry">Industry:</strong> ${profile.industry || 'N/A'}</p>`;
        htmlContent += `<p><strong data-tooltip-key="sector">Sector:</strong> ${profile.sector || 'N/A'}</p>`;
        htmlContent += `<p><strong data-tooltip-key="ceo">CEO:</strong> ${profile.ceo || 'N/A'}</p>`;
        htmlContent += `<p><strong data-tooltip-key="mktCap">Market Cap:</strong> ${profile.mktCap ? formatFinancialValue(profile.mktCap) : 'N/A'}</p>`;
        htmlContent += `<p><strong data-tooltip-key="exchangeShortName">Exchange:</strong> ${profile.exchangeShortName || 'N/A'}</p>`;
        if (profile.website) {
            htmlContent += `<p><strong data-tooltip-key="website">Website:</strong> <a href="${profile.website}" target="_blank">${profile.website}</a></p>`;
        }
        htmlContent += '</div>'; // End profile-info
        htmlContent += '<div class="profile-actions" style="margin-left:1rem; flex-shrink:0;">';
        htmlContent += '<button id="toggle-graphs-btn" class="action-button" style="padding:0.6rem 1rem; font-size:0.9rem;">Show Graphs</button>';
        htmlContent += '</div>';
        htmlContent += '</div>'; // End profile-info-container

        if (profile.description) {
            htmlContent += `<div class="company-description" style="margin-bottom:1.5rem; padding:1rem; background:rgba(0,0,0,0.1); border-radius:0.5rem;">`;
            htmlContent += `<h4 style="margin-top:0; margin-bottom:0.5rem;" data-tooltip-key="description">Company Description</h4>`;
            htmlContent += `<p>${profile.description}</p>`;
            htmlContent += '</div>';
        }
    }

    // Income Statement - Add style="display:none;" to chart-container
    if (data.incomeStatement && data.incomeStatement.length > 0) {
        htmlContent += '<h3>Income Statement (Annual)</h3>';
        htmlContent += createFinancialTableHtml(data.incomeStatement, ['date', 'revenue', 'costOfRevenue', 'grossProfit', 'operatingIncome', 'netIncome', 'eps', 'ebitda', 'interestExpense', 'incomeBeforeTax']);
        htmlContent += '<div class="chart-container" style="display:none;"><canvas id="incomeChart"></canvas></div>';
    }

    // Balance Sheet - Add style="display:none;" to chart-container
    if (data.balanceSheet && data.balanceSheet.length > 0) {
        htmlContent += '<h3>Balance Sheet (Annual)</h3>';
        htmlContent += createFinancialTableHtml(data.balanceSheet, ['date', 'totalAssets', 'totalLiabilities', 'totalEquity', 'cashAndCashEquivalents', 'totalDebt', 'netDebt', 'workingCapital']);
        htmlContent += '<div class="chart-container" style="display:none;"><canvas id="balanceSheetChart"></canvas></div>';
    }

    // Cash Flow Statement - Add style="display:none;" to chart-container
    if (data.cashFlow && data.cashFlow.length > 0) {
        htmlContent += '<h3>Cash Flow Statement (Annual)</h3>';
        htmlContent += createFinancialTableHtml(data.cashFlow, ['date', 'netIncome', 'depreciationAndAmortization', 'operatingCashFlow', 'capitalExpenditure', 'freeCashFlow', 'dividendsPaid']);
        htmlContent += '<div class="chart-container" style="display:none;"><canvas id="cashFlowChart"></canvas></div>';
    }

    // Key Metrics (remains the same, no chart for now)
    if (data.keyMetrics && data.keyMetrics.length > 0) {
        htmlContent += '<h3>Key Metrics (Annual)</h3>';
        htmlContent += createFinancialTableHtml(data.keyMetrics, ['date', 'debtToEquity', 'currentRatio', 'returnOnEquity', 'dividendYield', 'payoutRatio', 'priceToEarningsRatio', 'priceToBookRatio', 'priceToSalesRatio', 'enterpriseValueOverEBITDA', 'freeCashFlowPerShare']);
    }
    
    // Financial Growth - Add style="display:none;" to chart-container
    if (data.financialGrowth && data.financialGrowth.length > 0) {
        htmlContent += '<h3>Financial Growth (Annual, YoY)</h3>';
        const growthKeys = ['date', 'revenueGrowth', 'grossProfitGrowth', 'ebitdaGrowth', 'operatingIncomeGrowth', 'netIncomeGrowth', 'epsgrowth', 'freeCashFlowGrowth', 'dividendsperShareGrowth', 'debtGrowth'];
        htmlContent += createFinancialTableHtml(data.financialGrowth, growthKeys, true);
        htmlContent += '<div class="chart-container" style="display:none;"><canvas id="growthChart"></canvas></div>';
    }

    modalFinancialContent.innerHTML = htmlContent;

    // Add event listener for the toggle button AFTER it's in the DOM
    const toggleGraphsBtn = document.getElementById('toggle-graphs-btn');
    if (toggleGraphsBtn) {
        toggleGraphsBtn.addEventListener('click', () => {
            const chartContainers = modalFinancialContent.querySelectorAll('.chart-container');
            let allHidden = true;
            chartContainers.forEach(container => {
                if (container.style.display !== 'none') {
                    allHidden = false;
                }
                container.style.display = container.style.display === 'none' ? 'block' : 'none';
            });
            toggleGraphsBtn.textContent = allHidden ? 'Hide Graphs' : 'Show Graphs';
        });
    }

    // Render charts (they can render even if container is initially hidden)
    if (data.incomeStatement && data.incomeStatement.length > 0) {
        renderBarChart('incomeChart', data.incomeStatement, ['revenue', 'netIncome', 'grossProfit'], 'Income Statement Trends');
    }
    if (data.balanceSheet && data.balanceSheet.length > 0) {
        renderBarChart('balanceSheetChart', data.balanceSheet, ['totalAssets', 'totalLiabilities', 'totalEquity'], 'Balance Sheet Trends');
    }
    if (data.cashFlow && data.cashFlow.length > 0) {
        renderBarChart('cashFlowChart', data.cashFlow, ['operatingCashFlow', 'freeCashFlow'], 'Cash Flow Trends');
    }
    if (data.financialGrowth && data.financialGrowth.length > 0) {
        const growthKeys = ['revenueGrowth', 'grossProfitGrowth', 'ebitdaGrowth', 'operatingIncomeGrowth', 'netIncomeGrowth', 'epsgrowth', 'freeCashFlowGrowth', 'dividendsperShareGrowth', 'debtGrowth'];
        renderBarChart('growthChart', data.financialGrowth, growthKeys, 'Year-over-Year Growth Trends');
    }
}

function formatFinancialValue(value, isExplicitPercentage = false) {
    if (typeof value === 'number') {
        if (isExplicitPercentage) {
            return (value * 100).toFixed(2) + '%';
        }
        if (Math.abs(value) < 0.001 && value !== 0) return value.toExponential(2);
        if (Math.abs(value) >= 1e12) return (value / 1e12).toFixed(2) + ' T';
        if (Math.abs(value) >= 1e9) return (value / 1e9).toFixed(2) + ' B';
        if (Math.abs(value) >= 1e6) return (value / 1e6).toFixed(2) + ' M';
        // Do not use K for thousands as it might be confused with small numbers
        return value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 });
    }
    return value === null || typeof value === 'undefined' ? 'N/A' : String(value);
}

function createFinancialTableHtml(statementData, keysToShow, formatAllValuesAsPercentage = false) {
    if (!statementData || statementData.length === 0) {
        return '<p>No data available for this period.</p>';
    }

    let tableHtml = '<div class="financial-table-container"><table class="financial-table">';
    
    // Headers: Metric Name, then years
    tableHtml += '<thead><tr><th>Metric</th>';
    const years = statementData.map(s => s.date.substring(0, 4)).reverse(); // Get years, reverse to show most recent first
    years.forEach(year => tableHtml += `<th>${year}</th>`);
    tableHtml += '</tr></thead>';

    // Body: Metric rows
    tableHtml += '<tbody>';
    keysToShow.forEach(key => {
        const titleCaseKey = camelCaseToTitleCase(key);
        const explanation = metricExplanations[key] || metricExplanations[titleCaseKey] || '';
        tableHtml += `<tr><td data-tooltip-key="${key}"><strong>${titleCaseKey}</strong></td>`;
        statementData.slice().reverse().forEach(periodData => { // Iterate reversed data to match reversed year headers
            const value = periodData[key];
            tableHtml += `<td>${formatFinancialValue(value, formatAllValuesAsPercentage || (key.toLowerCase().includes('growth') && !key.toLowerCase().includes('perShare')) )}</td>`;
        });
        tableHtml += '</tr>';
    });
    tableHtml += '</tbody></table></div>';
    return tableHtml;
}

function camelCaseToTitleCase(text) {
    if (typeof text !== 'string') return '';
    // Handle specific acronyms that should remain uppercase e.g. EPS, EBITDA
    if (text === 'eps') return 'EPS';
    if (text === 'ebitda') return 'EBITDA';
    
    const result = text.replace(/([A-Z]+)/g, " $1").replace(/^./, (str) => str.toUpperCase());
    return result.trim(); // Trim leading space if first word was capitalized
}

function renderBarChart(canvasId, data, metrics, chartLabel) {
    const ctx = document.getElementById(canvasId);
    if (!ctx) {
        console.error(`Canvas with id ${canvasId} not found.`);
        return;
    }

    const reversedData = data.slice().reverse(); 
    const labels = reversedData.map(d => d.date || d.calendarYear);
    
    const datasets = metrics.map((metricKey, index) => {
        const barColors = [
            'rgba(139, 92, 246, 0.7)', 'rgba(236, 72, 153, 0.7)', 'rgba(16, 185, 129, 0.7)', 
            'rgba(59, 130, 246, 0.7)', 'rgba(245, 158, 11, 0.7)', 'rgba(239, 68, 68, 0.7)'
        ];
        const borderColors = [
            'rgb(139, 92, 246)', 'rgb(236, 72, 153)', 'rgb(16, 185, 129)',
            'rgb(59, 130, 246)', 'rgb(245, 158, 11)', 'rgb(239, 68, 68)'
        ];

        return {
            label: camelCaseToTitleCase(metricKey),
            data: reversedData.map(d => {
                const val = d[metricKey];
                return typeof val === 'number' ? val : null;
            }),
            backgroundColor: barColors[index % barColors.length], // Cycle through colors for each metric dataset
            borderColor: borderColors[index % borderColors.length],
            borderWidth: 1,
            barPercentage: 0.7, // Adjust for bar thickness
            categoryPercentage: 0.8 // Adjust for spacing between categories (years)
        };
    });

    const chart = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: labels,
            datasets: datasets
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                title: {
                    display: true,
                    text: chartLabel,
                    color: '#f9fafb',
                    font: { size: 18, weight: 'bold' },
                    padding: { top:10, bottom:20 }
                },
                legend: {
                    position: 'top',
                    labels: {
                        color: '#d1d5db',
                        font: { size: 12 },
                        usePointStyle: true,
                    }
                },
                tooltip: {
                    mode: 'index',
                    intersect: false,
                    callbacks: {
                        label: function(context) {
                            let label = context.dataset.label || '';
                            if (label) {
                                label += ': ';
                            }
                            if (context.parsed.y !== null) {
                                const metricKey = metrics[context.datasetIndex]; 
                                const isPercentageKey = metricKey.toLowerCase().includes('growth') || 
                                                      metricKey.toLowerCase().includes('yield') || 
                                                      metricKey.toLowerCase().includes('ratio') || 
                                                      metricKey.toLowerCase().includes('margin') ||
                                                      metricKey.toLowerCase().includes('rate') ||
                                                      metricKey === 'payoutRatio' || metricKey === 'returnOnEquity';
                                if (isPercentageKey) {
                                    label += (context.parsed.y * 100).toFixed(2) + '%';
                                }
                                else {
                                    label += formatFinancialValue(context.parsed.y);
                                }
                            }
                            return label;
                        }
                    }
                }
            },
            scales: {
                y: {
                    beginAtZero: true,
                    ticks: {
                        color: '#d1d5db',
                        font: { size: 12 },
                        callback: function(value, index, ticks) {
                            const isPercentHeavy = datasets.some(ds => {
                                const key = metrics.find(m => camelCaseToTitleCase(m) === ds.label);
                                return key && (key.toLowerCase().includes('growth') || key.toLowerCase().includes('yield') || key.toLowerCase().includes('ratio'));
                            });
                            if (isPercentHeavy && Math.abs(value) <= 2 && Math.abs(value) > 0.001) { 
                                return (value * 100).toFixed(0) + '%';
                            }
                            return formatFinancialValue(value);
                        }
                    },
                    grid: {
                        color: 'rgba(255, 255, 255, 0.1)'
                    }
                },
                x: {
                    ticks: {
                        color: '#d1d5db',
                        font: { size: 12 }
                    },
                    grid: {
                        color: 'rgba(255, 255, 255, 0.05)'
                    }
                }
            }
        }
    });
    activeCharts.push(chart);
}

function getRandomColor() {
    const colors = [
        '#8b5cf6', '#ec4899', '#10b981', '#3b82f6', '#f59e0b', 
        '#ef4444', '#6366f1', '#d946ef', '#06b6d4', '#f97316'
    ];
    return colors[Math.floor(Math.random() * colors.length)];
}

function handleTooltipMouseOver(event) {
    const target = event.target.closest('[data-tooltip-key]');
    if (target && customTooltip) {
        const key = target.dataset.tooltipKey;
        const explanation = metricExplanations[key] || 'No explanation available.';
        
        customTooltip.innerHTML = explanation;
        customTooltip.style.display = 'block';
        // Delay visibility slightly to allow for positioning, then trigger transition
        setTimeout(() => {
            if (customTooltip.style.display === 'block') { // Check if still meant to be visible
                 customTooltip.classList.add('visible');
            }
        }, 20); // Small delay before making it visible for transition
        positionTooltip(event);
    }
}

function handleTooltipMouseOut(event) {
    const target = event.target.closest('[data-tooltip-key]');
    if (target && customTooltip) {
        customTooltip.classList.remove('visible');
        // Wait for transition to finish before hiding with display:none
        // The transition duration is 0.15s (150ms)
        setTimeout(() => {
            // Only hide if no new tooltip is about to be shown by another mouseover
            if (!customTooltip.classList.contains('visible')) {
                customTooltip.style.display = 'none';
                customTooltip.innerHTML = '';
            }
        }, 150); 
    }
}

function handleTooltipMouseMove(event) {
    if (customTooltip && customTooltip.style.display === 'block') {
        positionTooltip(event);
    }
}

function positionTooltip(event) {
    if (!customTooltip) return;

    const offsetX = 15; // Offset from the mouse cursor
    const offsetY = 15;
    let x = event.pageX + offsetX;
    let y = event.pageY + offsetY;

    // Prevent tooltip from going off-screen
    const tooltipRect = customTooltip.getBoundingClientRect(); // getBoundingClientRect is relative to viewport
    const viewportWidth = window.innerWidth;
    const viewportHeight = window.innerHeight;

    // Adjust for page scroll to compare with event.pageX/Y which are document-relative
    const scrollX = window.pageXOffset || document.documentElement.scrollLeft;
    const scrollY = window.pageYOffset || document.documentElement.scrollTop;

    if (x + tooltipRect.width > viewportWidth + scrollX) {
        x = event.pageX - tooltipRect.width - offsetX;
    }
    if (y + tooltipRect.height > viewportHeight + scrollY) {
        y = event.pageY - tooltipRect.height - offsetY;
    }
    // Ensure it does not go off the top or left of the viewport either
    if (x < scrollX) x = scrollX + offsetX;
    if (y < scrollY) y = scrollY + offsetY;

    customTooltip.style.left = `${x}px`;
    customTooltip.style.top = `${y}px`;
}